{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/link-list/link-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","project","project_name","description","href","git_link","CardList","projects","map","key","id","SearchBox","link","name","LinkList","links","App","handleChange","e","state","hosted","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAGaA,G,kBAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBACEC,IAAI,kBAGN,4BAAKF,EAAMG,QAAQC,cACnB,2BAAIJ,EAAMG,QAAQE,aAClB,uBAAGC,KAAMN,EAAMG,QAAQI,UAAvB,WCNSC,EAAW,SAAAR,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACzB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQS,GAAIT,QAASA,SCJzBU,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvB,yBAAKb,UAAU,kBACb,4BAAKa,EAAKC,MACV,2BAAID,EAAKA,MACT,uBAAGR,KAAMQ,EAAKA,MAAOA,EAAKC,SCHjBC,EAAW,SAAAhB,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMiB,MAAMP,KAAI,SAAAI,GAAI,OACnB,kBAAC,EAAD,CAAWH,IAAKG,EAAKF,GAAIE,KAAMA,SCqEtBI,E,YAtEb,aAAe,IAAD,8BACZ,+CAsDFC,aAAe,SAAAC,KApDb,EAAKC,MAAQ,CACXZ,SAAU,CACR,CACEG,GAAI,EACJL,SAAU,iCACVH,aAAc,aACdkB,OAAQ,GACRjB,YACE,gIAEJ,CACEO,GAAI,EACJL,SAAU,qCACVH,aAAc,eACdkB,OAAQ,GACRjB,YACE,qFAEJ,CACEO,GAAI,EACJL,SAAU,kCACVH,aAAc,YACdkB,OAAQ,GACRjB,YACE,0EAEJ,CACEO,GAAI,EACJL,SAAU,yCACVH,aAAc,cACdkB,OAAQ,GACRjB,YACE,oHAGNY,MAAO,CACL,CACEL,GAAI,EACJG,KAAM,SACND,KAAM,8BAER,CACEF,GAAI,EACJG,KAAM,WACND,KAAM,gDA/CA,E,mHAyDJ,IAAD,EACqBS,KAAKF,MAAzBZ,EADD,EACCA,SAAUQ,EADX,EACWA,MAClB,OACE,yBAAKhB,UAAU,OACb,6CACA,iDACA,kBAAC,EAAD,CAAUgB,MAAOA,IACjB,kBAAC,EAAD,CAAUR,SAAUA,S,GAjEVe,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4293691a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = props => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"project image\"\r\n      //src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.project.project_name}</h2>\r\n    <p>{props.project.description}</p>\r\n    <a href={props.project.git_link}>Code</a>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\n\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = props => (\r\n  <div className=\"card-list\">\r\n    {props.projects.map(project => (\r\n      <Card key={project.id} project={project} />\r\n    ))}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ link }) => (\r\n  <div className=\"link-container\">\r\n    <h2>{link.name}</h2>\r\n    <p>{link.link}</p>\r\n    <a href={link.link}>{link.name}</a>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./link-list.styles.css\";\r\n\r\nimport { SearchBox } from \"../search-box/search-box.component\";\r\n\r\nexport const LinkList = props => (\r\n  <div className=\"link-list\">\r\n    {props.links.map(link => (\r\n      <SearchBox key={link.id} link={link} />\r\n    ))}\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { LinkList } from \"./components/link-list/link-list.component.jsx\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      projects: [\n        {\n          id: 1,\n          git_link: \"https://github.com/ckbball/dev\",\n          project_name: \"Dev Finder\",\n          hosted: \"\",\n          description:\n            \"Dev Finder is a platform for aspiring software engineers to find others to build projects with building crucial team skills.\"\n        },\n        {\n          id: 2,\n          git_link: \"https://github.com/ckbball/smurfin\",\n          project_name: \"Smurfin Shop\",\n          hosted: \"\",\n          description:\n            \"Smurfin Shop is a platform for gamers to sell and buy League of Legends accounts.\"\n        },\n        {\n          id: 3,\n          git_link: \"https://github.com/ckbball/quik\",\n          project_name: \"Quik Apps\",\n          hosted: \"\",\n          description:\n            \"Quik Apps is an all in one platform for software engineer job finders.\"\n        },\n        {\n          id: 4,\n          git_link: \"https://github.com/ckbball/flights-gin\",\n          project_name: \"Flights API\",\n          hosted: \"\",\n          description:\n            \"Flights API is a simple REST API that allows users to search for and book airline flights all around the world.\"\n        }\n      ],\n      links: [\n        {\n          id: 1,\n          name: \"github\",\n          link: \"https://github.com/ckbball\"\n        },\n        {\n          id: 2,\n          name: \"linkedin\",\n          link: \"https://www.linkedin.com/in/caesar-ladion/\"\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {}\n\n  handleChange = e => {};\n\n  render() {\n    const { projects, links } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Caesar Ladion</h1>\n        <h2>Software Engineer</h2>\n        <LinkList links={links} />\n        <CardList projects={projects}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}